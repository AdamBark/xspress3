/**
\mainpage xspress3 EPICS Support Module
\section intro_sec Introduction

This EPICS module provides <a href="http://cars9.uchicago.edu/software/epics/areaDetector.html">areaDetector</a> based control of the <a href="http://www.quantumdetectors.com/products/xspress-3">Xspress3 Readout System</a>. It uses an API provided by Quantum Detectors and STFC to control the hardware and readout data.

This documentation will provide intructions on how to use the EPICS software interface to Xspress 3. More detailed user instructions are provided by Quantum Detectors.

\section user_sec User Manual

\subsection iocConnection Connecting To The Xspress 3

Once the EPICS IOC is running it is necessary to connect to the Xspress 3 system. This can be done by setting the following PVs. The {P} is the base part of the PV name, which is system dependent. PVs with an <code>_RBV</code> on the end are readback PVs that can be used to confirm that a parameter has been changed successfully.

<table border="1">
<tr>
<td>{P}:NUM_CHANNELS</td>
<td>The number of channels this system is configured for. Must be less than or equal to {P}:MAX_NUM_CHANNELS_RBV, which is the value passed into <code>xspress3Config</code>.</td>
</tr>
<tr>
<td>{P}:NUM_FRAMES_CONFIG</td>
<td>The number of frames to configure the system with. This must be less than or equal to {P}:MAX_FRAMES_RBV, which is the value passed into <code>xspress3Config</code>. Normally this should be set equal to {P}:MAX_FRAMES_RBV.</td>
</tr>
<tr>
<td>{P}:CONFIG_PATH</td>
<td>This is the path to the Xspress configuration files. These files should have been provided with the system.</td>
</tr>
</table> 

Once the above three PVs are set, connection can take place by writing 1 to {P}:CONNECT.

If connection was successful then {P}:CONNECTED will be set to 1.

When connection occurs the following API functions are called by the EPICS driver:
<ol>
<li><b>xsp3_config</b></li>
<li><b>xsp3_clocks_setup</b></li>
<li><b>xsp3_restore_settings</b></li>
<li><b>xsp3_format_run</b></li>
<li><b>xsp3_set_run_flags</b></li>
</ol>
In additon, if connection was successful, several parameters are read from the system so the EPICS driver can update RBV type PVs (eg. scaler window limits).

\subsection iocData Data Acquisition

The following PVs are involved in data acqusition or monitoring. Some of the PVs map directly onto Xspress 3 API functions, and this will be noted below.

<table border="1">
<tr>
<td>{P}:Acquire\n{P}:Acquire_RBV</td>
<td>This is used to start and stop acqusition. Write a 1 to this to begin acqusition. Normally the data collection will finish automatically once NumImages is reached. However, to manually stop a data collection write a 0 to this PV. If the driver is in the process of reading a large number of frames, for example at high frame rates, it will finish this before the stop completes. This PV maps directly to <b>xsp3_histogram_start</b> and <b>xsp3_histogram_stop</b></td>
</tr>
<tr>
<td>{P}:ERASE</td>
<td>This will call the Xspress 3 API <b>xsp3_histogram_clear</b> function. It will also clear any data held by EPICS PVs, including the array PVs. Do this before starting a new data collection.</td>
</tr>
<tr>
<td>{P}:UPDATE</td>
<td>This does a manual update on all the scaler and ROI arrays, to ensure that they contain the latest data. It is necessary to write a 1 to this at the end of an acqusition.</td>
</tr>
<tr>
<td>{P}:NumImages\n{P}:NumImages_RBV</td>
<td>Set and read the number of frames to acquire. This number must be less than {P}:NUM_FRAMES_DRIVER_RBV, which was set when the IOC was configured. Acquisition will automatically stop when the number of frames acquired equals NumImages.</td>
</tr>
<tr>
<td>{P}:CTRL_MCA_ROI\n{P}:CTRL_MCA_ROI_RBV</td>
<td>This is used to enable and disable ROI calculations. To enable ROI calculations set this to 1 and set the ROI limits on any channel. To turn ROI calculations off set this to 0. This can save CPU time if operating at high frame rates.</td>
</tr>
<tr>
<td>{P}:TriggerMode\n{P}:TriggerMode_RBV</td>
<td>Set and read the triggering mode. This PV maps directly on to the API function <b>xsp3_set_glob_timeA</b>. In simulation mode any mode can be selected. Options are:
<ul>
<li>Fixed - Corresponds to API option XSP3_GTIMA_SRC_FIXED</li>
<li>Internal - Corresponds to API option XSP3_GTIMA_SRC_INTERNAL</li>
<li>IDC -  Corresponds to API option XSP3_GTIMA_SRC_IDC</li>
<li>TTL Veto Only - Use this for external triggering using a gate signal. Corresponds to API option XSP3_GTIMA_SRC_TTL_VETO_ONLY</li>
<li>TTL Both - Corresponds to API option XSP3_GTIMA_SRC_TTL_BOTH</li>
<li>LVDS Veto Only - Corresponds to API option XSP3_GTIMA_SRC_LVDS_VETO_ONLY</li>
<li>LVDS Both - Corresponds to API option XSP3_GTIMA_SRC_LVDS_BOTH</li>
</ul>
</td>
</tr>
<tr>
<td>{P}:StatusMessage_RBV</td>
<td>This contains a string to describe the current state of the EPICS driver. Any error should result in a meaningful message in this PV.</td>
</tr>
<tr>
<td>{P}:DetectorState_RBV</td>
<td>This PV contains the current state of the EPICS driver. See the areaDetector documentation for a list of the possible states. Most of the time the state will be either <b>Idle</b> or <b>Acquire</b>. In the event of an error it will be <b>Error</b>.</td>
</tr>
<tr>
<td>{P}:FRAME_COUNT_RBV</td>
<td>This contains the number of frames read out of the Xspress 3 each time the driver checks for new data.</td>
</tr>
<tr>
<td>{P}:ArrayCounter_RBV</td>
<td>Contains the total number of frames acquired during the current or last acqusition. It is reset to zero at the beginning of the next acqusition. The rate of change of this PV also indicates the frame rate we are operating at.</td>
</tr>
<tr>
<td>{P}:ArrayRate_RBV</td>
<td>This is a rough indication of the frame rate we are operating at. It is calculated every second, and uses the rate of change of the ArrayCounter_RBV PV.</td>
</tr>
</table>

\subsection iocFile HDF File Saving

This software makes use of the areaDetector HDF file writing plugin. Full documentation for this is provided <a href="http://cars9.uchicago.edu/software/epics/NDPluginFile.html">here</a>. Some of the most relevant PVs are exposed on the main GUI, and these are detailed below:

<table border="1">
<tr>
<td>{P}:HDF5:Capture\n{P}:HDF5:Capture_RBV</td>
<td>Write a 1 to this PV before starting an acqusition. This will trigger the HDF software to start capturing data to write a file, and set {P}:HDF5:Capture_RBV to 1. At the end of the acquisition it is necessary to write a 0 to this PV.</td>
</tr>
<tr>
<td>{P}:ArrayCallbacks</td>
<td>This should normally be left enabled, as disabling this will disable visualisation and of the data. It can safely be left enabled, even when not saving data using {P}:HDF5:Capture.</td>
</tr>

</table>

\subsection iocSca Scaler Data and Window Settings

The following PVs provide access to the scalers, and allow the user to set scaler related parameters. The 'C1' part of the PV name indicates channel 1. The lists is duplicated for each channel: 'C2', 'C3' etc. 

The first table shows the single value PVs that show the latest scaler value during an acqusition.

<table border="1">
<tr>
<td>{P}:C1_SCA0:Value_RBV</td>
<td>The <b>Time</b> scaler.</td>
</tr>
<tr>
<td>{P}:C1_SCA1:Value_RBV</td>
<td>The <b>Reset Ticks</b> scaler.</td>
</tr>
<tr>
<td>{P}:C1_SCA2:Value_RBV</td>
<td>The <b>Reset Count</b> scaler.</td>
</tr>
<tr>
<td>{P}:C1_SCA3:Value_RBV</td>
<td>The <b>All Event</b> scaler.</td>
</tr>
<tr>
<td>{P}:C1_SCA4:Value_RBV</td>
<td>The <b>All Good</b> scaler.</td>
</tr>
<tr>
<td>{P}:C1_SCA5:Value_RBV</td>
<td>The <b>Scaler 1</b> scaler. The lower and upper window limits for this are set using {P}:C1_SCA5_LLM and {P}:C1_SCA5_HLM. The window limits are set using API function <b>xsp3_set_window</b></td>
</tr>
<tr>
<td>{P}:C1_SCA6:Value_RBV</td>
<td>The <b>Scaler 2</b> scaler. The lower and upper window limits for this are set using {P}:C1_SCA6_LLM and {P}:C1_SCA6_HLM. The window limits are set using API function <b>xsp3_set_window</b></td>
</tr>
<tr>
<td>{P}:C1_SCA7:Value_RBV</td>
<td>The <b>Pileup</b> scaler.</td>
</tr>
</table>

The following table shows the set and read parameters for the <b>All Good</b>, <b>Scaler 1</b> and <b>Scaler 2</b> scalers.

<table border="1">
<tr>
<td>{P}:C1_SCA4_THRESHOLD\n{P}:C1_SCA4_THRESHOLD_RBV</td>
<td>Set and read the <b>All Good</b> scaler window threshold. This is set using the API function <b>xsp3_set_good_thres</b> The readback value is also read at connection time.</td>
</tr>
<tr>
<td>{P}:C1_SCA5_LLM\n{P}:C1_SCA5_LLM_RBV</td>
<td>Set and read the <b>Scaler 1</b> scaler window lower limit. This is set using the API function <b>xsp3_set_window</b>. The readback value is also read at connection time.</td>
</tr>
<tr>
<td>{P}:C1_SCA5_HLM\n{P}:C1_SCA5_HLM_RBV</td>
<td>Set and read the <b>Scaler 1</b> scaler window upper limit. This is set using the API function <b>xsp3_set_window</b> The readback value is also read at connection time.</td>
</tr>
<tr>
<td>{P}:C1_SCA6_HLM\n{P}:C1_SCA6_HLM_RBV</td>
<td>Set and read the <b>Scaler 2</b> scaler window upper limit. This is set using the API function <b>xsp3_set_window</b> The readback value is also read at connection time.</td>
</tr>
<tr>
<td>{P}:C1_SCA6_HLM\n{P}:C1_SCA6_HLM_RBV</td>
<td>Set and read the <b>Scaler 2</b> scaler window upper limit. This is set using the API function <b>xsp3_set_window</b> The readback value is also read at connection time.</td>
</tr>
</table>

The following table shows the scaler data array PVs. These arrays accumulate the scaler data during an acqusition to provide live feedback if needed. At the end of the acqusition the arrays are updated with the final scaler data. 

 <table border="1">
<tr>
<td>{P}:C1_SCA0:ArrayData_RBV</td>
<td>The <b>Time</b> scaler array.</td>
</tr>
<tr>
<td>{P}:C1_SCA1:ArrayData_RBV</td>
<td>The <b>Reset Ticks</b> scaler array.</td>
</tr>
<tr>
<td>{P}:C1_SCA2:ArrayData_RBV</td>
<td>The <b>Reset Count</b> scaler array.</td>
</tr>
<tr>
<td>{P}:C1_SCA3:ArrayData_RBV</td>
<td>The <b>All Event</b> scaler array.</td>
</tr>
<tr>
<td>{P}:C1_SCA4:ArrayData_RBV</td>
<td>The <b>All Good</b> scaler array.</td>
</tr>
<tr>
<td>{P}:C1_SCA5:ArrayData_RBV</td>
<td>The <b>Scaler 1</b> scaler array.</td>
</tr>
<tr>
<td>{P}:C1_SCA6:ArrayData_RBV</td>
<td>The <b>Scaler 2</b> scaler array.</td>
</tr>
<tr>
<td>{P}:C1_SCA7:ArrayData_RBV</td>
<td>The <b>Pileup</b> scaler.</td>
</tr>
</table>

The above parameters are saved in the HDF file. The HDF parameter names will match the PV names.

\subsection iocMca MCA Spectra and ROI Data

The following table lists the array PVs for the MCA Spectra, as well as the ROI window settings and readback values. There are 4 regions of interest per channel, so only the PVs for the first one is listed in the below table. The first ROI PVs have 'ROI1' in the name, so simply substute this for 'ROI2', 'ROI3' or 'ROI4' for the other regions of interest.

 <table border="1">
<tr>
<td>{P}:ARR1:ArrayData</td>
<td>The dead time corrected MCA spectra data. This is updated during a scan when a new frame is read out.
</tr>
<tr>
<td>{P}:ARRSUM1:ArrayData</td>
<td>The cummulative dead time corrected MCA spectra data. This is updated during a scan when a new frame is read out. This is the sum of all the spectra data from {P}:ARR1:ArrayData.
</tr>
<tr>
<td>{P}:C1_MCA_ROI1_LLM</td>
<td>The lower limit for the first ROI.</td>
</tr>
<tr>
<td>{P}:C1_MCA_ROI1_HLM</td>
<td>The upper limit for the first ROI.</td>
</tr>
<tr>
<td>{P}:C1_ROI1:Value_RBV</td>
<td>The ROI readback value for each frame. This is updated during acqusition.</td>
</tr>
<tr>
<td>{P}:C1_ROI1:ArrayData_RBV</td>
<td>The ROI reacback array that holds the ROI for every frame from an acqusition. This is updated during acqusition.</td>
</tr>
</table>

The above parameters are saved in the HDF file. All the MCA spectra arrays are also saved.

\subsection iocDtc The Dead Time Correction Parameters

When the Epics IOC starts up it reads the dead time correction (DTC) parameters for each channel. These are set by the system configuration files supplied with the readout system.

 <table border="1">
<tr>
<td>{P}:C1_DTC_FLAGS_RBV</td>
<td>The DTC Flags parameter.</td>
</tr>
<tr>
<td>{P}:C1_DTC_AEG_RBV</td>
<td>The DTC All Good Event Gradient parameter.</td>
</tr>
<tr>
<td>{P}:C1_DTC_AEO_RBV</td>
<td>The DTC All Good Event Offset parameter.</td>
</tr>
<tr>
<td>{P}:C1_DTC_IWG_RBV</td>
<td>The DTC In Window Gradient parameter.</td>
</tr>
<tr>
<td>{P}:C1_DTC_IWO_RBV</td>
<td>The DTC In Window Offset parameter.</td>
</tr>
</table>

The above parameters are saved in the HDF file.

 

**/


