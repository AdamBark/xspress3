#######################################################
# Database records for an Xspress3 channel
# Matthew Pearson/Nick Rees
# Sept 2014
#
# Macros:
# % macro,  P,           Device prefix
# % macro,  S,           Device suffix
# % macro,  PORT,        Asyn port name
# % macro,  ADDR,        Asyn address
# % macro,  TIMEOUT,     Asyn timeout
# % macro,  CHAN,        Channel number
# % macro,  NELEMENTS,   Number of elements in NDAttribute waveform
# % macro,  INDEX,       Index of the channel in the detector array
#
# The following just forces the Diamond iocbuilder to recognise that
# the NELEMENTS macro is needed - it is used in an included file,
# but not this file
# % $(NELEMENTS)
##########################################################################

substitute "R=$(S)"

##########################################################################
# Add in records to set SCA related parameters.
# Note: the actual SCA data is displayed to the user using 
# the NDAttribute plugin.
##########################################################################

#All good SCA
substitute "SCA=4"
include "xspress3ChannelSCAThreshold.template"

#Window 1 SCA
substitute "SCA=5"
include "xspress3ChannelSCALimits.template"

#Window 2 SCA
substitute "SCA=6"
include "xspress3ChannelSCALimits.template"

##########################################################################
# Dead Time Correction Parameters Read At Connection Time
##########################################################################
# ///
# /// Read the Dead Time Correction Flags.
# ///
record(longin, "$(P)$(R)C$(CHAN)_DTC_FLAGS_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_CHAN_DTC_FLAGS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Read the Dead Time Correction All Event Grad parameter.
# ///
record(ai, "$(P)$(R)C$(CHAN)_DTC_AEG_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_CHAN_DTC_AEG")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction All Event Offset parameter.
# ///
record(ai, "$(P)$(R)C$(CHAN)_DTC_AEO_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_CHAN_DTC_AEO")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction In Window Grad parameter.
# ///
record(ai, "$(P)$(R)C$(CHAN)_DTC_IWG_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_CHAN_DTC_IWG")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

# ///
# /// Read the Dead Time Correction In Window Offset parameter.
# ///
record(ai, "$(P)$(R)C$(CHAN)_DTC_IWO_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))XSP3_CHAN_DTC_IWO")
   field(SCAN, "I/O Intr")
   field(PREC, "4")
}

record(bo, "$(P)$(R)C$(CHAN)_PluginControlVal")
{
   field(VAL, "1")
   field(ONAM, "Enabled")
   field(ZNAM, "Disabled")
}

# Channel ROI
substitute "R=:ROI$(CHAN):, NDARRAY_ADDR=0, NDARRAY_PORT=XSP3, PORT=XSP3.ROI$(CHAN)"
include "NDROI.template"

record(longout, "$(P)$(R)MinY")
{
    field(VAL, "$(INDEX)")
}

record(longout, "$(P)$(R)SizeY")
{
    field(VAL, "1")
}

record(bo, "$(P)$(R)PushEnableCallbacks")
{
    field(DOL, "$(P)$(S)C$(CHAN)_PluginControlVal CP")
    field(OMSL, "closed_loop")
    field(OUT, "$(P)$(R)EnableCallbacks CA")
}

substitute "R=:ARR$(CHAN):, NDARRAY_PORT=XSP3.ROI$(CHAN), PORT=XSP3.ARR$(CHAN), FTVL=DOUBLE, TYPE=Float64"
include "NDStdArrays.template"

record(bo, "$(P)$(R)PushEnableCallbacks")
{
    field(DOL, "$(P)$(S)C$(CHAN)_PluginControlVal CP")
    field(OMSL, "closed_loop")
    field(OUT, "$(P)$(R)EnableCallbacks CA")
}


substitute "R=:ROISUM$(CHAN):, PORT=XSP3.ROISUM$(CHAN), NDARRAY_PORT=XSP3.PROC"
include "NDROI.template"

record(longout, "$(P)$(R)MinY")
{
    field(VAL, "$(INDEX)")
}

record(longout, "$(P)$(R)SizeY")
{
    field(VAL, "1")
}

record(bo, "$(P)$(R)PushEnableCallbacks")
{
    field(DOL, "$(P)$(S)C$(CHAN)_PluginControlVal CP")
    field(OMSL, "closed_loop")
    field(OUT, "$(P)$(R)EnableCallbacks CA")
}


substitute "R=:ARRSUM$(CHAN):, NDARRAY_PORT=XSP3.ROISUM$(CHAN), PORT=XSP3.ARRSUM$(CHAN)"
include "NDStdArrays.template"

record(bo, "$(P)$(R)PushEnableCallbacks")
{
    field(DOL, "$(P)$(S)C$(CHAN)_PluginControlVal CP")
    field(OMSL, "closed_loop")
    field(OUT, "$(P)$(R)EnableCallbacks CA")
}


substitute "R=:C$(CHAN)_ROI:, PORT=XSP3.ROISTAT$(CHAN), NDARRAY_PORT=XSP3.ROI$(CHAN), NCHANS=$(NELEMENTS)"
include "NDROIStat.template"

record(bo, "$(P)$(R)PushEnableCallbacks")
{
    field(DOL, "$(P)$(S)C$(CHAN)_PluginControlVal CP")
    field(OMSL, "closed_loop")
    field(OUT, "$(P)$(R)EnableCallbacks CA")
}

substitute "R=:C$(CHAN)_ROISUM:, PORT=XSP3.ROISUMSTAT$(CHAN), NDARRAY_PORT=XSP3.ROISUM$(CHAN), NCHANS=$(NELEMENTS)"
include "NDROIStat.template"

record(bo, "$(P)$(R)PushEnableCallbacks")
{
    field(DOL, "$(P)$(S)C$(CHAN)_PluginControlVal CP")
    field(OMSL, "closed_loop")
    field(OUT, "$(P)$(R)EnableCallbacks CA")
}

# NDAttribute plugins for the scalar outputs

substitute "R=:C$(CHAN)_SCAS:, PORT=XSP3.C$(CHAN)_SCAS, ADDR=0, NDARRAY_PORT=XSP3, NCHANS=$(NELEMENTS)"
include "NDAttribute.template"

record(bo, "$(P)$(R)PushEnableCallbacks")
{
    field(DOL, "$(P)$(S)C$(CHAN)_PluginControlVal CP")
    field(OMSL, "closed_loop")
    field(OUT, "$(P)$(R)EnableCallbacks CA")
}

substitute "R=:C$(CHAN)_SCA0:, ADDR=0"
include "NDAttributeN.template"

substitute "R=:C$(CHAN)_SCA1:, ADDR=1"
include "NDAttributeN.template"

substitute "R=:C$(CHAN)_SCA2:, ADDR=2"
include "NDAttributeN.template"

substitute "R=:C$(CHAN)_SCA3:, ADDR=3"
include "NDAttributeN.template"

substitute "R=:C$(CHAN)_SCA4:, ADDR=4"
include "NDAttributeN.template"

substitute "R=:C$(CHAN)_SCA5:, ADDR=5"
include "NDAttributeN.template"

substitute "R=:C$(CHAN)_SCA6:, ADDR=6"
include "NDAttributeN.template"

substitute "R=:C$(CHAN)_SCA7:, ADDR=7"
include "NDAttributeN.template"

