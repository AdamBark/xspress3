#######################################################
# Database records for the Xspress3
# Matthew Pearson
# Sept 2012
#
# Channel dependant records are in xspress3Channel.template
# Channel SCA records are in xspress3ChannelSCA.template, xspress3ChannelSCANoLimits.template
# and xspress3ChannelSCAThreshold.template, depending on the type of SCA.
# Records to control live data update are in xspress3DataUpdate.template
#
# Macros:
#   P,R - PV name
#   PORT - Asyn port name
#   ADDR - Asyn address (set to zero)
#   TIMEOUT - Asyn timeout
#   MAX_SPECTRA - The max number of elements in a spectra.
#   MAX_FRAMES - The max number of spectra to collect in a scan. 
#
#######################################################

# /// 
# /// Reset the device.
# ///
record(bo, "$(P)$(R)RESET")
{
    field(DTYP,"asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))RESET")
    field(ZNAM,"Done")	
    field(ONAM,"Reset")
}

# /// 
# /// Erase MCA data.
# ///
record(bo,"$(P)$(R)ERASE") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))ERASE")
    field(ZNAM,"Done")
    field(ONAM,"Erase")
}

# /// 
# /// Erase MCA data, then start collecting data.
# ///
record(bo,"$(P)$(R)ERASE_START") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))ERASE")
    field(ZNAM,"Done")
    field(ONAM,"Erase")
    field(FLNK,"$(P)START.PROC")
}

# /// 
# /// Start collecting data.
# ///
record(bo,"$(P)$(R)START") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))START")
    field(ZNAM,"Done")
    field(ONAM,"Start")
}

# /// 
# /// Stop collecting data.
# ///
record(bo,"$(P)$(R)STOP") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))STOP")
    field(ZNAM,"Done")
    field(ONAM,"Stop")
}

# /// 
# /// Show the busy status.
# ///
record(bi,"$(P)$(R)BUSY") {
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))BUSY")
    field(ZNAM,"Idle")
    field(ONAM,"Busy")
    field(VAL, "0")
    field(SCAN, "I/O Intr")
}

# ///
# /// System status message (error messages, information messages, etc.)
# ///
record(waveform, "$(P)$(R)STATUS_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))STATUS")
    field(FTVL, "UCHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}


# ///
# /// Set the numer of channels to read out.
# ///
record(longout, "$(P)$(R)NUM_CHANNELS")
{
   field(PINI, "YES")	
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))NUM_CHANNELS")
   field(VAL,  "1")
}


# ///
# /// Read the number of channels
# ///
record(longin, "$(P)$(R)NUM_CHANNELS_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))NUM_CHANNELS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Read the max number of channels supported by the system
# ///
record(longin, "$(P)$(R)MAX_NUM_CHANNELS_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MAX_NUM_CHANNELS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Select the trigger source (internal or external).
# ///
record(mbbo, "$(P)$(R)TRIGGER_MODE")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TRIGGER_MODE")
   field(ZRST, "Fixed")
   field(ZRVL, "0")
   field(ONST, "Internal")
   field(ONVL, "1")
   field(TWST, "IDC")
   field(TWVL, "2")
   field(THST, "TTL Veto Only")
   field(THVL, "3")
   field(FRST, "TTL Both")
   field(FRVL, "4")
   field(FVST, "LVDS Veto Only")
   field(FVVL, "5")
   field(SXST, "LVDS Both")
   field(SXVL, "6")
   field(VAL,  "0")
}

# ///
# /// Read the trigger source (internal or external).
# ///
record(mbbi, "$(P)$(R)TRIGGER_MODE_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TRIGGER_MODE")
   field(ZRST, "Fixed")
   field(ZRVL, "0")
   field(ONST, "Internal")
   field(ONVL, "1")
   field(TWST, "IDC")
   field(TWVL, "2")
   field(THST, "TTL Veto Only")
   field(THVL, "3")
   field(FRST, "TTL Both")
   field(FRVL, "4")
   field(FVST, "LVDS Veto Only")
   field(FVVL, "5")
   field(SXST, "LVDS Both")
   field(SXVL, "6")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the fixed time register, in FIXED trigger mode.
# ///
record(longout, "$(P)$(R)FIXED_TIME")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))FIXED_TIME")
   field(VAL,  "0")
}

# ///
# /// Get the fixed time register, used for FIXED trigger mode.
# ///
record(longin, "$(P)$(R)FIXED_TIME_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))FIXED_TIME")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the numer of frames to collect in internal trigger mode.
# ///
record(longout, "$(P)$(R)NUM_FRAMES")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))NUM_FRAMES")
   field(VAL,  "0")
}

# ///
# /// Get the numer of frames to collect in internal trigger mode.
# ///
record(longin, "$(P)$(R)NUM_FRAMES_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))NUM_FRAMES")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the number of xspress3 cards to set up. 
# /// This is used in the xsp3_config function.
# ///
record(longout, "$(P)$(R)NUM_CARDS")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))NUM_CARDS")
   field(VAL,  "0")
}

# ///
# /// Get the number of xspress3 cards to set up. 
# /// This is used in the xsp3_config function.
# ///
record(longin, "$(P)$(R)NUM_CARDS_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))NUM_CARDS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the path used for the file configuration. 
# /// This is used in the xsp3_restore_config function.
# ///
record(waveform, "$(P)$(R)CONFIG_PATH")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))CONFIG_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

# ///
# /// Get the path used for the file configuration. 
# /// This is used in the xsp3_restore_config function.
# ///
record(waveform, "$(P)$(R)CONFIG_PATH_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))CONFIG_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

# ///
# /// Connect to the xspress3. This runs the xsp3_config function as
# /// well as some other setup functions.
# ///
record(bo, "$(P)$(R)CONNECT")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))CONNECT")
   field(ZNAM,"Connect")
   field(ONAM,"Connect")	
}

# /// 
# /// Show the connected status.
# ///
record(bi,"$(P)$(R)CONNECTED") {
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CONNECTED")
    field(ZNAM,"Disconnected")
    field(ONAM,"Connected")
    field(VAL, "0")
    field(SCAN, "I/O Intr")
}


# ///
# /// Disconnect from the xspress3. This runs the xsp3_close function as
# /// well as some other setup functions.
# ///
record(bo, "$(P)$(R)DISCONNECT")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DISCONNECT")
   field(ZNAM,"Disconnect")
   field(ONAM,"Disconnect")	
}

# ///
# /// Save the current xspress3 settings to a file. This makes use of the 
# /// API function xsp3_save_settings(). This does nothing if we are not 
# /// connected or CONFIG_PATH is not set.
# ///
record(bo, "$(P)$(R)SAVE_SETTINGS")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SAVE_SETTINGS")
   field(ZNAM,"Save")
   field(ONAM,"Save")	
}


# ///
# /// Restore the xspress3 settings from a file. This makes use of the 
# /// API function xsp3_save_settings(). This does nothing if we are not 
# /// connected or CONFIG_PATH is not set.
# ///
record(bo, "$(P)$(R)RESTORE_SETTINGS")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))RESTORE_SETTINGS")
   field(ZNAM,"Restore")
   field(ONAM,"Restore")	
}


# ///
# /// Set the max number of elements in a spectra. This is a database parameter, so the
# /// record has DISP=1 so it can't be changed at runtime (do we need runtime control of this?)
# ///
record(longout, "$(P)$(R)MAX_SPECTRA")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MAX_SPECTRA")
   field(VAL,  "$(MAX_SPECTRA)")
   field(DISP, "1")
   field(FLNK, "$(P)$(R)MAX_SPECTRA_RBV.PROC")
}

# ///
# /// Read the max spectra size from the driver. This was set at startup
# /// by $(P)$(R)MAX_SPECTRA.
# ///
record(longin, "$(P)$(R)MAX_SPECTRA_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MAX_SPECTRA")
   field(SCAN, "I/O Intr")
}


# ///
# /// Set the max number of frames to acquire. This is a database parameter, so the
# /// record has DISP=1 so it can't be changed at runtime (do we need runtime control of this?)
# ///
record(longout, "$(P)$(R)MAX_FRAMES")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MAX_FRAMES")
   field(VAL,  "$(MAX_FRAMES)")
   field(DISP, "1")
   field(FLNK, "$(P)$(R)MAX_FRAMES_RBV.PROC")
}

# ///
# /// Read the max number of frames from the driver. This was set at startup
# /// by $(P)$(R)MAX_FRAMES.
# ///
record(longin, "$(P)$(R)MAX_FRAMES_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MAX_FRAMES")
   field(SCAN, "I/O Intr")
}

# ///
# /// Read the number of frames acquired in an acquisition. This is
# /// updated during an acqusition.
# ///
record(longin, "$(P)$(R)FRAME_COUNT_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))FRAME_COUNT")
   field(SCAN, "I/O Intr")
}

# ///
# /// Read the total number of frames acquired in an acquisition. This is
# /// updated during an acqusition.
# ///
record(longin, "$(P)$(R)FRAME_COUNT_TOTAL_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))FRAME_COUNT_TOTAL")
   field(SCAN, "I/O Intr")
}


include "xspress3DataUpdate.template"


substitute "CHAN=1"
substitute "ADDR=0"
include "xspress3Channel.template"

substitute "CHAN=2"
substitute "ADDR=1"
include "xspress3Channel.template"

substitute "CHAN=3"
substitute "ADDR=2"
include "xspress3Channel.template"

substitute "CHAN=4"
substitute "ADDR=3"
include "xspress3Channel.template"

substitute "CHAN=5"
substitute "ADDR=4"
include "xspress3Channel.template"

substitute "CHAN=6"
substitute "ADDR=5"
include "xspress3Channel.template"

substitute "CHAN=7"
substitute "ADDR=6"
include "xspress3Channel.template"

substitute "CHAN=8"
substitute "ADDR=7"
include "xspress3Channel.template"


