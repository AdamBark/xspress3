#######################################################
# Database records for the Xspress3
# Matthew Pearson
# Sept 2012
#
# Channel dependant records are in xspress3Channel.template
# Channel SCA records are in xspress3ChannelSCA.template
#
# Macros:
#   P,R - PV name
#   PORT - Asyn port name
#   ADDR - Asyn address (set to zero)
#   TIMEOUT - Asyn timeout
#
#######################################################

# /// 
# /// Reset the device.
# ///
record(bo, "$(P)$(R)RESET")
{
    field(DTYP,"asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))RESET")
    field(ZNAM,"Done")	
    field(ONAM,"Reset")
}

# /// 
# /// Erase MCA data.
# ///
record(bo,"$(P)$(R)ERASE") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))ERASE")
    field(ZNAM,"Done")
    field(ONAM,"Erase")
}

# /// 
# /// Erase MCA data, then start collecting data.
# ///
record(bo,"$(P)$(R)ERASE_START") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))ERASE")
    field(ZNAM,"Done")
    field(ONAM,"Erase")
    field(FLNK,"$(P)START.PROC")
}

# /// 
# /// Start collecting data.
# ///
record(bo,"$(P)$(R)START") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))START")
    field(ZNAM,"Done")
    field(ONAM,"Start")
}

# /// 
# /// Stop collecting data.
# ///
record(bo,"$(P)$(R)STOP") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))STOP")
    field(ZNAM,"Done")
    field(ONAM,"Stop")
}

# ///
# /// System status message (error messages, information messages, etc.)
# ///
record(waveform, "$(P)$(R)STATUS_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))STATUS")
    field(FTVL, "UCHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}


# ///
# /// Read the number of channels
# ///
record(longin, "$(P)$(R)NUM_CHANNELS_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))NUM_CHANNELS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Read the max number of channels supported by the system
# ///
record(longin, "$(P)$(R)MAX_NUM_CHANNELS_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MAX_NUM_CHANNELS")
   field(SCAN, "I/O Intr")
}

# ///
# /// Select the trigger source (internal or external).
# ///
record(mbbo, "$(P)$(R)TRIGGER_MODE")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(VAL,  "0")
}

# ///
# /// Read the trigger source (internal or external).
# ///
record(mbbi, "$(P)$(R)TRIGGER_MODE_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

# ///
# /// Set the numer of frames to collect in internal trigger mode.
# ///
record(longout, "$(P)$(R)NUM_FRAMES")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))NUM_FRAMES")
   field(VAL,  "0")
}

# ///
# /// Get the numer of frames to collect in internal trigger mode.
# ///
record(longin, "$(P)$(R)NUM_FRAMES_RBV")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))NUM_FRAMES")
   field(SCAN, "I/O Intr")
}



substitute "CHAN=1"
substitute "ADDR=0"
include "xspress3Channel.template"

substitute "CHAN=2"
substitute "ADDR=1"
include "xspress3Channel.template"

substitute "CHAN=3"
substitute "ADDR=2"
include "xspress3Channel.template"

substitute "CHAN=4"
substitute "ADDR=3"
include "xspress3Channel.template"

substitute "CHAN=5"
substitute "ADDR=4"
include "xspress3Channel.template"

substitute "CHAN=6"
substitute "ADDR=5"
include "xspress3Channel.template"

substitute "CHAN=7"
substitute "ADDR=6"
include "xspress3Channel.template"

substitute "CHAN=8"
substitute "ADDR=7"
include "xspress3Channel.template"


